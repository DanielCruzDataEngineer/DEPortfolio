{"status":"ok","feed":{"url":"https://medium.com/feed/@danielcruz.alu.lmb","title":"Stories by DanielCruzDataScience on Medium","link":"https://medium.com/@danielcruz.alu.lmb?source=rss-a863b493b03------2","author":"","description":"Stories by DanielCruzDataScience on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/0*ba6wqD7k-ff78Vg9"},"items":[{"title":"Como implantar uma aplica\u00e7\u00e3o Streamlit no ECS (AWS).","pubDate":"2023-01-28 15:45:43","link":"https://medium.com/@danielcruz.alu.lmb/como-implantar-uma-aplica%C3%A7%C3%A3o-streamlit-no-ecs-aws-b833dce33e92?source=rss-a863b493b03------2","guid":"https://medium.com/p/b833dce33e92","author":"DanielCruzDataScience","thumbnail":"https://cdn-images-1.medium.com/max/440/1*Q3KQv0VvQ8H0DVw3Pd23fA.png","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/440/1*Q3KQv0VvQ8H0DVw3Pd23fA.png\"></figure><h3><strong>- Introdu\u00e7\u00e3o</strong></h3>\n<p>Como todo engenheiro de software, dados, arquiteto de dados, o dom\u00ednio de ferramentas de cloud \u00e9 um diferencial para que voc\u00ea consiga n\u00e3o s\u00f3 se adequar, mas tamb\u00e9m se destacar no mercado tech.<br>Com isso, nos surge a necessidade de estudar diferentes ferramentas, tal como AWS ECS(Elastic Container Service), que basicamente te ajudar\u00e1 a rodar uma imagem docker armazenada no AWS ECR(Elastic Container Registry).<br>As duas ferramentas ajudam uma a outra, onde o ECR \u00e9 o in\u00edcio de tudo, pois \u00e9 onde voc\u00ea armazena sua imagem docker\u00a0, e o ECS\u00a0, com um cluster, \u00e9 o toque final da sua aplica\u00e7\u00e3o, pois \u00e9 onde voc\u00ea roda essa imagem implantada.</p>\n<ul><li><strong>Mas como eu implanto uma aplica\u00e7\u00e3o streamlit numa imagem\u00a0docker?</strong></li></ul>\n<p>Antes de implantar uma aplica\u00e7\u00e3o streamlit, se certifique de que ela roda localmente no seu pc normalmente, longe de poss\u00edveis erros que quebrariam um processo da sua aplica\u00e7\u00e3o.<br>Para fazer esse teste, rode o seguinte comando no seu terminal:</p>\n<pre>streamlit run web_app_v3.py</pre>\n<p>Caso rode, e n\u00e3o apare\u00e7a nenhum bloco vermelho ao entrar no site da sua aplica\u00e7\u00e3o, voc\u00ea poder\u00e1 seguir os pr\u00f3ximos\u00a0passos.</p>\n<ul><li><strong>Certo, mas o que vem em\u00a0diante?</strong></li></ul>\n<p>Ap\u00f3s o primeiro passo, temos criar nosso arquivo requirements.txt\u00a0, onde voc\u00ea pode rodar o comando <strong>pip freeze</strong> no seu terminal e copiar as libs e colar no seu arquivo requirements.txt.</p>\n<p>Ele ficar\u00e1 assim:(Exemplo)</p>\n<pre>streamlit==1.10.0<br>yfinance==0.1.77</pre>\n<p>Ap\u00f3s isso, temos que agora implantarmos nossa aplica\u00e7\u00e3o em um Dockerfile para que consigamos criar uma imagem ( Dar um Build) do nosso aplicativo.<br>Para fazermos, isso\u00a0, crie um arquivo com o nome Dockerfile e escreva o seguinte c\u00f3digo\u00a0nele:</p>\n<pre><br>#Base Image to use<br>#Aqui chamamos a imagem do python, como se tivessemos puxando a imagem do Py.<br>FROM python:3.7.9-slim<br><br>#Expose port 8080<br>#Estamos aqui abrindo as portas 8080(Geralmente, usamos em local para testes)<br>EXPOSE 8080<br><br>#Optional - install git to fetch packages directly from github<br># Aqui apenas , para caso queira atualizar seu apt-get ( Caso esteja em linux)<br>RUN apt-get update &amp;&amp; apt-get install -y git<br><br>#Copy Requirements.txt file into app directory<br># Aqui trazeremos nosso arquivo de requerimentos, onde ir\u00e1 ter todas as libs<br>COPY requirements.txt app/requirements.txt<br><br>#install all requirements in requirements.txt<br>#Agora instalaremos nossas libs na imagem docker<br>RUN pip install -r app/requirements.txt<br><br>#Copy all files in current directory into app directory<br>#web_app_v3 \u00e9 o nome da nossa aplica\u00e7\u00e3o <br>COPY . /web_app_v3<br><br>#Change Working Directory to app directory<br>#Aqui ser\u00e1 o diret\u00f3rio onde trabalharemos nossa aplica\u00e7\u00e3o<br>WORKDIR /web_app_v3<br># A partir daqui, teremos nossas configura\u00e7\u00f5es para rodarmos em ip p\u00fablico.<br>ENV PORT 8501<br><br># cmd to launch app when container is run<br>CMD streamlit run web_app_v3.py<br><br># streamlit-specific commands for config<br>#Configura\u00e7\u00f5es para otimizar a aplica\u00e7\u00e3o na AWS ECS<br>ENV LC_ALL=C.UTF-8<br>ENV LANG=C.UTF-8<br>RUN mkdir -p /root/.streamlit<br>RUN bash -c 'echo -e \"\\<br>[general]\\n\\<br>email = \\\"\\\"\\n\\<br>\" &gt; /root/.streamlit/credentials.toml'<br><br>RUN bash -c 'echo -e \"\\<br>[server]\\n\\<br>enableCORS = false\\n\\<br>\" &gt; /root/.streamlit/config.toml'</pre>\n<p>Ap\u00f3s termos jogado nossa aplica\u00e7\u00e3o para um Dockerfile\u00a0, vamos agora rodar o seguinte comando no nosso terminal\u00a0:</p>\n<pre>docker build -t streamlit .</pre>\n<p>Ent\u00e3o\u00a0, o Docker ir\u00e1 criar uma imagem a partir do Dockerfile que criamos(Demorar\u00e1 alguns minutos dependendo do tamanho da sua aplica\u00e7\u00e3o).Observe esse resultado:</p>\n<pre>#15 naming to docker.io/library/stream done<br>#15 DONE 4.0s</pre>\n<p>Em caso de sucesso na cria\u00e7\u00e3o da imagem, vamos agora rodar nossa aplica\u00e7\u00e3o, onde apenas iremos observar se ir\u00e1 rodar tudo certinho, rodando o seguinte\u00a0comando:</p>\n<pre> docker run -p 8080:8080 streamlit</pre>\n<p>Em caso de sucesso, aparecer\u00e1 o seguinte resultado\u00a0:</p>\n<pre>  You can now view your Streamlit app in your browser.<br><br>  Network URL: http://172.17.0.2:8501<br>  External URL: http://191.6.14.45:8501<br><br></pre>\n<ul><li><strong>Ap\u00f3s isso, vamos pra m\u00e3o na massa na\u00a0AWS:</strong></li></ul>\n<p>Antes de tudo, voc\u00ea deve ter seu aws cli configurado no pc, com credenciais de usu\u00e1rio do IAM ( Caso n\u00e3o tenha, irei fazer um tutorial de como configurar seu aws\u00a0cli).</p>\n<p>Como j\u00e1 criamos e testamos a imagem em local, n\u00e3o iremos ter problemas de abbend durante o processamento da nossa imagem para o AWS ECR( Onde armazenamos nossa imagem).<br>1o Passo\u00a0: Crie um reposit\u00f3rio no seu AWS ECR\u00a0, com o seguinte\u00a0comando:</p>\n<pre>aws ecr create-repository - repository-name streamlit-repo - region us-east-1</pre>\n<p>O nome do nosso reposit\u00f3rio ser\u00e1 streamlit-repo e a regi\u00e3o a us-east-1(Considero a melhor de se usar\u00a0ECS).</p>\n<p>Ir\u00e1 aparecer alguns dados do seu reposit\u00f3rio:</p>\n<pre>{<br>    \"repository\": {<br>        \"registryId\": \"aws_account_id\",<br>        \"repositoryName\": \"streamlit-repo\",<br>        \"repositoryArn\": \"arn:aws:ecr:region:aws_account_id:repository/streamlit-repo\",<br>        \"createdAt\": 1505337806.0,<br>        \"repositoryUri\": \"aws_account_id.dkr.ecr.us-east-1.amazonaws.com/streamlit-repo\"<br>    }<br>}</pre>\n<p>Ap\u00f3s isso\u00a0, vamos nomear nossa imagem docker de acordo com o repositoryUri especificado na cria\u00e7\u00e3o do seu reposit\u00f3rio ECR:</p>\n<pre>docker tag stream &lt;repositoryUri&gt;</pre>\n<p>Feito essa etapa, agora vamos logar no nosso ECR.Exemplo de como\u00a0logar:</p>\n<pre>docker login -u AWS -p $(aws ecr get-login-password --region REGION) aws_account_id.dkr.ecr.REGION.amazonaws.com</pre>\n<p>Caso logue com sucesso, aparecer\u00e1:</p>\n<pre>Login Succeeded</pre>\n<p>Com isso, podemos agora dar um docker push da nossa imagem para o ECR.Exemplo:</p>\n<pre>docker push aws_account_id.dkr.ecr.region.amazonaws.com/hello-repository</pre>\n<p>Ap\u00f3s isso, entre no ECR, e dentro do reposit\u00f3rio que criamos, e l\u00e1 estar\u00e1 a imagem em que demos o\u00a0push:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/308/1*FC7NkEDqnQTJNxU3--_Q4g.png\"></figure><p>Observe que a imagem est\u00e1 implantada no\u00a0ECR.</p>\n<p>Feito essa etapa, vamos ao que interessa:</p>\n<ul><li><strong>Como implantar essa imagem num ECS e rodar pra todos conseguirem entrar na sua aplica\u00e7\u00e3o\u00a0:</strong></li></ul>\n<p>Ao entrar no ECS, voc\u00ea ver\u00e1 a seguinte\u00a0tela:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*fjssG4os2NBqTHNuEqaBoA.png\"></figure><p>Ent\u00e3o, clique em Task definitions</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/177/1*LdnEanFuOtXBs2amRnQvmA.png\"></figure><p>Ao clicar nessa aba, clique em Create New Task Definition, e coloque os dados do container.</p>\n<p>Ap\u00f3s preencher os dados, clique em\u00a0next.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/692/1*O_YkAVc78y3eSAz1JjcTQQ.png\"></figure><p>Em enviroment, selecione a op\u00e7\u00e3o AWS Fargate e preencha com as seguintes informa\u00e7\u00f5es:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/716/1*b8skQWC490xFQuUySa6bgA.png\"></figure><p>Des\u00e7a at\u00e9 a op\u00e7\u00e3o next, e ap\u00f3s isso, clique em\u00a0create.</p>\n<p>Assim\u00a0, voc\u00ea j\u00e1 ter\u00e1 criado sua tarefa para rodar sua aplica\u00e7\u00e3o em um\u00a0cluster.</p>\n<p>Ent\u00e3o, depois de tudo isso, clique em Clusters, coloque o nome do seu cluster e o crie.(Demorar\u00e1 alguns minutinhos para\u00a0rodar).</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/391/1*ZM4WvFpW9oXwvJxPw_1VKw.png\"></figure><p>Clique ent\u00e3o no seu cluster, depois em\u00a0tasks</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/872/1*xzOAmYvwGJv4n0HGv6E_sg.png\"></figure><p>Clique em Run New Task\u00a0, e des\u00e7a at\u00e9 encontrar\u00a0:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/684/1*JT_mGwEKbXmtfkZ6d0jzrA.png\"></figure><p>Coloque o nome da sua task criada anteriormente e crie a task no\u00a0cluster.</p>\n<p>Ap\u00f3s isso, o seu cluster rodar\u00e1 sua aplica\u00e7\u00e3o em um cluster, por\u00e9m falta apenas mais um \u00faltimo\u00a0detalhe:</p>\n<ul><li><strong>E como rodar essa aplica\u00e7\u00e3o aberta ao p\u00fablico em uma porta 8501(Padr\u00e3o Streamlit):</strong></li></ul>\n<p>Primeiro, clique no id da sua task, e depois em <strong>ENI ID, depois clique em security group\u00a0names:</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/314/1*E6S0oevBXadvheVlnusXPw.png\"></figure><p>Segundo, clique em Edit Inbound Rules e adicione mais uma rule com Custom TCP e a porta 8501, e ip como 0.0.0.0/0.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/645/1*n_3BsV0nak1tPlS7FosOJg.png\"></figure><p>Ap\u00f3s isso, \u00e9 s\u00f3 alegria!!!!Sua aplica\u00e7\u00e3o streamlit estar\u00e1 aberta ao\u00a0p\u00fablico.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/937/1*6FpSwh-Mz5uLezzyuGFcqw.png\"></figure><p><strong>Agora sua aplica\u00e7\u00e3o estar\u00e1 no ar para todos\u00a0verem.</strong></p>\n<p>Ent\u00e3o, \u00e9 isso\u00a0, galera, espero que tenham curtido essa imers\u00e3o em docker e AWS (Confesso que n\u00e3o \u00e9 f\u00e1cil explicar docker). Trazerei mais conte\u00fados de cloud, DEvoPs e Engenharia de dados pra voc\u00eas. S\u00f3\u00a0alegria!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b833dce33e92\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/440/1*Q3KQv0VvQ8H0DVw3Pd23fA.png\"></figure><h3><strong>- Introdu\u00e7\u00e3o</strong></h3>\n<p>Como todo engenheiro de software, dados, arquiteto de dados, o dom\u00ednio de ferramentas de cloud \u00e9 um diferencial para que voc\u00ea consiga n\u00e3o s\u00f3 se adequar, mas tamb\u00e9m se destacar no mercado tech.<br>Com isso, nos surge a necessidade de estudar diferentes ferramentas, tal como AWS ECS(Elastic Container Service), que basicamente te ajudar\u00e1 a rodar uma imagem docker armazenada no AWS ECR(Elastic Container Registry).<br>As duas ferramentas ajudam uma a outra, onde o ECR \u00e9 o in\u00edcio de tudo, pois \u00e9 onde voc\u00ea armazena sua imagem docker\u00a0, e o ECS\u00a0, com um cluster, \u00e9 o toque final da sua aplica\u00e7\u00e3o, pois \u00e9 onde voc\u00ea roda essa imagem implantada.</p>\n<ul><li><strong>Mas como eu implanto uma aplica\u00e7\u00e3o streamlit numa imagem\u00a0docker?</strong></li></ul>\n<p>Antes de implantar uma aplica\u00e7\u00e3o streamlit, se certifique de que ela roda localmente no seu pc normalmente, longe de poss\u00edveis erros que quebrariam um processo da sua aplica\u00e7\u00e3o.<br>Para fazer esse teste, rode o seguinte comando no seu terminal:</p>\n<pre>streamlit run web_app_v3.py</pre>\n<p>Caso rode, e n\u00e3o apare\u00e7a nenhum bloco vermelho ao entrar no site da sua aplica\u00e7\u00e3o, voc\u00ea poder\u00e1 seguir os pr\u00f3ximos\u00a0passos.</p>\n<ul><li><strong>Certo, mas o que vem em\u00a0diante?</strong></li></ul>\n<p>Ap\u00f3s o primeiro passo, temos criar nosso arquivo requirements.txt\u00a0, onde voc\u00ea pode rodar o comando <strong>pip freeze</strong> no seu terminal e copiar as libs e colar no seu arquivo requirements.txt.</p>\n<p>Ele ficar\u00e1 assim:(Exemplo)</p>\n<pre>streamlit==1.10.0<br>yfinance==0.1.77</pre>\n<p>Ap\u00f3s isso, temos que agora implantarmos nossa aplica\u00e7\u00e3o em um Dockerfile para que consigamos criar uma imagem ( Dar um Build) do nosso aplicativo.<br>Para fazermos, isso\u00a0, crie um arquivo com o nome Dockerfile e escreva o seguinte c\u00f3digo\u00a0nele:</p>\n<pre><br>#Base Image to use<br>#Aqui chamamos a imagem do python, como se tivessemos puxando a imagem do Py.<br>FROM python:3.7.9-slim<br><br>#Expose port 8080<br>#Estamos aqui abrindo as portas 8080(Geralmente, usamos em local para testes)<br>EXPOSE 8080<br><br>#Optional - install git to fetch packages directly from github<br># Aqui apenas , para caso queira atualizar seu apt-get ( Caso esteja em linux)<br>RUN apt-get update &amp;&amp; apt-get install -y git<br><br>#Copy Requirements.txt file into app directory<br># Aqui trazeremos nosso arquivo de requerimentos, onde ir\u00e1 ter todas as libs<br>COPY requirements.txt app/requirements.txt<br><br>#install all requirements in requirements.txt<br>#Agora instalaremos nossas libs na imagem docker<br>RUN pip install -r app/requirements.txt<br><br>#Copy all files in current directory into app directory<br>#web_app_v3 \u00e9 o nome da nossa aplica\u00e7\u00e3o <br>COPY . /web_app_v3<br><br>#Change Working Directory to app directory<br>#Aqui ser\u00e1 o diret\u00f3rio onde trabalharemos nossa aplica\u00e7\u00e3o<br>WORKDIR /web_app_v3<br># A partir daqui, teremos nossas configura\u00e7\u00f5es para rodarmos em ip p\u00fablico.<br>ENV PORT 8501<br><br># cmd to launch app when container is run<br>CMD streamlit run web_app_v3.py<br><br># streamlit-specific commands for config<br>#Configura\u00e7\u00f5es para otimizar a aplica\u00e7\u00e3o na AWS ECS<br>ENV LC_ALL=C.UTF-8<br>ENV LANG=C.UTF-8<br>RUN mkdir -p /root/.streamlit<br>RUN bash -c 'echo -e \"\\<br>[general]\\n\\<br>email = \\\"\\\"\\n\\<br>\" &gt; /root/.streamlit/credentials.toml'<br><br>RUN bash -c 'echo -e \"\\<br>[server]\\n\\<br>enableCORS = false\\n\\<br>\" &gt; /root/.streamlit/config.toml'</pre>\n<p>Ap\u00f3s termos jogado nossa aplica\u00e7\u00e3o para um Dockerfile\u00a0, vamos agora rodar o seguinte comando no nosso terminal\u00a0:</p>\n<pre>docker build -t streamlit .</pre>\n<p>Ent\u00e3o\u00a0, o Docker ir\u00e1 criar uma imagem a partir do Dockerfile que criamos(Demorar\u00e1 alguns minutos dependendo do tamanho da sua aplica\u00e7\u00e3o).Observe esse resultado:</p>\n<pre>#15 naming to docker.io/library/stream done<br>#15 DONE 4.0s</pre>\n<p>Em caso de sucesso na cria\u00e7\u00e3o da imagem, vamos agora rodar nossa aplica\u00e7\u00e3o, onde apenas iremos observar se ir\u00e1 rodar tudo certinho, rodando o seguinte\u00a0comando:</p>\n<pre> docker run -p 8080:8080 streamlit</pre>\n<p>Em caso de sucesso, aparecer\u00e1 o seguinte resultado\u00a0:</p>\n<pre>  You can now view your Streamlit app in your browser.<br><br>  Network URL: http://172.17.0.2:8501<br>  External URL: http://191.6.14.45:8501<br><br></pre>\n<ul><li><strong>Ap\u00f3s isso, vamos pra m\u00e3o na massa na\u00a0AWS:</strong></li></ul>\n<p>Antes de tudo, voc\u00ea deve ter seu aws cli configurado no pc, com credenciais de usu\u00e1rio do IAM ( Caso n\u00e3o tenha, irei fazer um tutorial de como configurar seu aws\u00a0cli).</p>\n<p>Como j\u00e1 criamos e testamos a imagem em local, n\u00e3o iremos ter problemas de abbend durante o processamento da nossa imagem para o AWS ECR( Onde armazenamos nossa imagem).<br>1o Passo\u00a0: Crie um reposit\u00f3rio no seu AWS ECR\u00a0, com o seguinte\u00a0comando:</p>\n<pre>aws ecr create-repository - repository-name streamlit-repo - region us-east-1</pre>\n<p>O nome do nosso reposit\u00f3rio ser\u00e1 streamlit-repo e a regi\u00e3o a us-east-1(Considero a melhor de se usar\u00a0ECS).</p>\n<p>Ir\u00e1 aparecer alguns dados do seu reposit\u00f3rio:</p>\n<pre>{<br>    \"repository\": {<br>        \"registryId\": \"aws_account_id\",<br>        \"repositoryName\": \"streamlit-repo\",<br>        \"repositoryArn\": \"arn:aws:ecr:region:aws_account_id:repository/streamlit-repo\",<br>        \"createdAt\": 1505337806.0,<br>        \"repositoryUri\": \"aws_account_id.dkr.ecr.us-east-1.amazonaws.com/streamlit-repo\"<br>    }<br>}</pre>\n<p>Ap\u00f3s isso\u00a0, vamos nomear nossa imagem docker de acordo com o repositoryUri especificado na cria\u00e7\u00e3o do seu reposit\u00f3rio ECR:</p>\n<pre>docker tag stream &lt;repositoryUri&gt;</pre>\n<p>Feito essa etapa, agora vamos logar no nosso ECR.Exemplo de como\u00a0logar:</p>\n<pre>docker login -u AWS -p $(aws ecr get-login-password --region REGION) aws_account_id.dkr.ecr.REGION.amazonaws.com</pre>\n<p>Caso logue com sucesso, aparecer\u00e1:</p>\n<pre>Login Succeeded</pre>\n<p>Com isso, podemos agora dar um docker push da nossa imagem para o ECR.Exemplo:</p>\n<pre>docker push aws_account_id.dkr.ecr.region.amazonaws.com/hello-repository</pre>\n<p>Ap\u00f3s isso, entre no ECR, e dentro do reposit\u00f3rio que criamos, e l\u00e1 estar\u00e1 a imagem em que demos o\u00a0push:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/308/1*FC7NkEDqnQTJNxU3--_Q4g.png\"></figure><p>Observe que a imagem est\u00e1 implantada no\u00a0ECR.</p>\n<p>Feito essa etapa, vamos ao que interessa:</p>\n<ul><li><strong>Como implantar essa imagem num ECS e rodar pra todos conseguirem entrar na sua aplica\u00e7\u00e3o\u00a0:</strong></li></ul>\n<p>Ao entrar no ECS, voc\u00ea ver\u00e1 a seguinte\u00a0tela:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*fjssG4os2NBqTHNuEqaBoA.png\"></figure><p>Ent\u00e3o, clique em Task definitions</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/177/1*LdnEanFuOtXBs2amRnQvmA.png\"></figure><p>Ao clicar nessa aba, clique em Create New Task Definition, e coloque os dados do container.</p>\n<p>Ap\u00f3s preencher os dados, clique em\u00a0next.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/692/1*O_YkAVc78y3eSAz1JjcTQQ.png\"></figure><p>Em enviroment, selecione a op\u00e7\u00e3o AWS Fargate e preencha com as seguintes informa\u00e7\u00f5es:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/716/1*b8skQWC490xFQuUySa6bgA.png\"></figure><p>Des\u00e7a at\u00e9 a op\u00e7\u00e3o next, e ap\u00f3s isso, clique em\u00a0create.</p>\n<p>Assim\u00a0, voc\u00ea j\u00e1 ter\u00e1 criado sua tarefa para rodar sua aplica\u00e7\u00e3o em um\u00a0cluster.</p>\n<p>Ent\u00e3o, depois de tudo isso, clique em Clusters, coloque o nome do seu cluster e o crie.(Demorar\u00e1 alguns minutinhos para\u00a0rodar).</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/391/1*ZM4WvFpW9oXwvJxPw_1VKw.png\"></figure><p>Clique ent\u00e3o no seu cluster, depois em\u00a0tasks</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/872/1*xzOAmYvwGJv4n0HGv6E_sg.png\"></figure><p>Clique em Run New Task\u00a0, e des\u00e7a at\u00e9 encontrar\u00a0:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/684/1*JT_mGwEKbXmtfkZ6d0jzrA.png\"></figure><p>Coloque o nome da sua task criada anteriormente e crie a task no\u00a0cluster.</p>\n<p>Ap\u00f3s isso, o seu cluster rodar\u00e1 sua aplica\u00e7\u00e3o em um cluster, por\u00e9m falta apenas mais um \u00faltimo\u00a0detalhe:</p>\n<ul><li><strong>E como rodar essa aplica\u00e7\u00e3o aberta ao p\u00fablico em uma porta 8501(Padr\u00e3o Streamlit):</strong></li></ul>\n<p>Primeiro, clique no id da sua task, e depois em <strong>ENI ID, depois clique em security group\u00a0names:</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/314/1*E6S0oevBXadvheVlnusXPw.png\"></figure><p>Segundo, clique em Edit Inbound Rules e adicione mais uma rule com Custom TCP e a porta 8501, e ip como 0.0.0.0/0.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/645/1*n_3BsV0nak1tPlS7FosOJg.png\"></figure><p>Ap\u00f3s isso, \u00e9 s\u00f3 alegria!!!!Sua aplica\u00e7\u00e3o streamlit estar\u00e1 aberta ao\u00a0p\u00fablico.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/937/1*6FpSwh-Mz5uLezzyuGFcqw.png\"></figure><p><strong>Agora sua aplica\u00e7\u00e3o estar\u00e1 no ar para todos\u00a0verem.</strong></p>\n<p>Ent\u00e3o, \u00e9 isso\u00a0, galera, espero que tenham curtido essa imers\u00e3o em docker e AWS (Confesso que n\u00e3o \u00e9 f\u00e1cil explicar docker). Trazerei mais conte\u00fados de cloud, DEvoPs e Engenharia de dados pra voc\u00eas. S\u00f3\u00a0alegria!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b833dce33e92\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["python","data","devops","docker","streamlit"]}]}